module Twigen exposing (main)

import Browser
import Html exposing (Html, div, h1, h3, button, ul, li, text, textarea, br, table, tbody, tr, td, select, option, input)
import Html.Attributes as Attr
import Html.Events exposing (..)
import Random exposing (Generator, map, map2, map3, lazy)



main =
    Browser.element
        { init = \() -> init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }



-- MODEL


type alias Model =
    { sentences : List String
    , meisi : List Meisi
    , keiyousi : List Keiyousi
    , dousi : List Dousi
    , tuikaSettei : TuikaSettei
    }

type alias TuikaSettei =
    { gokan : String
    , gyou : String
    , katuyoukei : String
    , syurui : String
    }



-- UPDATE


type Msg
    = Roll
    | NewSentences (List String)
    | MeisiUpdate (List String)
    | KeiyousiUpdate (List String)
    | DousiUpdate (List Dousi)
    | TuikaSetteiUpdate TuikaSettei

update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        Roll ->
            let
                command =
                    Random.generate NewSentences
                        <| Random.list 10
                        <| sentence model
            in
                ( model, command )

        NewSentences newSentences ->
            ( { model | sentences = newSentences }, Cmd.none )

        MeisiUpdate list ->
            ( { model | meisi = list }, Cmd.none )

        KeiyousiUpdate list ->
            ( { model | keiyousi = list }, Cmd.none )

        DousiUpdate list ->
            ( { model | dousi = list }, Cmd.none )

        TuikaSetteiUpdate settei ->
            ( { model | tuikaSettei = settei }, Cmd.none )




-- VIEW


view : Model -> Html Msg
view model =
    div []
        [ h1 [][ text "„ÇØ„ÇΩ„ÉÑ„Ç§„Ç∏„Çß„Éç„É¨„Éº„Çø" ]
        , ul []
          (model.sentences
              |> List.map (\s ->
                  li[][text s]
              )
          )
        , button [ onClick Roll ] [ text "Roll" ]
        , div [ Attr.style "display" "flex" ]
            [ div []
                [ h3 [][ text <| "ÂêçË©û" ]
                , textarea
                    [ Attr.value <| (model.meisi |> String.join "\n")
                    , onInput meisiKousin
                    , Attr.style "resize" "none"
                    ][]
                ]
            , div []
                [ h3 [][ text <| "ÂΩ¢ÂÆπË©û" ]
                , textarea
                    [ Attr.value <| (model.keiyousi |> String.join "\n")
                    , onInput keiyousiKousin
                    , Attr.style "resize" "none"
                    ][]
                ]
            ]
        , div []
            [ h3 [][ text <| "ÂãïË©û" ]
            , table []
                [ tbody
                    [ Attr.style "overflow-y" "scroll"
                    , Attr.style "display" "block"
                    , Attr.style "height" "100px"
                    ]
                    ( model.dousi
                        |> List.indexedMap (\i (Dousi gokan katuyou syurui) ->
                            tr []
                                [ td [][ text <| gokan ]
                                , td [][ text <| katuyouToString katuyou ]
                                , td [][ text <| dousiSyuruiToString <| syurui ]
                                , td []
                                    [ button
                                        [ onClick <| dousiSakujo i model.dousi ]
                                        [ text <| "ÂâäÈô§" ]
                                    ]
                                ]
                        )
                    )
                ]
            , input
                [ Attr.type_ "text"
                , onInput <| gokanSettei model.tuikaSettei
                ][]
            , select
                [ onInput <| gyouSettei model.tuikaSettei ]
                [ option [ Attr.value "„ÅÇ" ][ text <| "„ÅÇË°å" ]
                , option [ Attr.value "„Åã" ][ text <| "„ÅãË°å" ]
                , option [ Attr.value "„Åï" ][ text <| "„ÅïË°å" ]
                , option [ Attr.value "„Åü" ][ text <| "„ÅüË°å" ]
                , option [ Attr.value "„Å™" ][ text <| "„Å™Ë°å" ]
                , option [ Attr.value "„Å∞" ][ text <| "„Å∞Ë°å" ]
                , option [ Attr.value "„Åæ" ][ text <| "„ÅæË°å" ]
                , option [ Attr.value "„Çâ" ][ text <| "„ÇâË°å" ]
                , option [ Attr.value "„Çè" ][ text <| "„ÇèË°å" ]
                ]
            , select
                [ onInput <| katuyoukeiSettei model.tuikaSettei ]
                [ option [ Attr.value "‰∫îÊÆµ" ][ text <| "‰∫îÊÆµ" ]
                , option [ Attr.value "‰∏ä‰∏Ä" ][ text <| "‰∏ä‰∏Ä" ]
                , option [ Attr.value "‰∏ã‰∏Ä" ][ text <| "‰∏ã‰∏Ä" ]
                , option [ Attr.value "„ÅïÂ§âÊ†º" ][ text <| "Â§âÊ†º" ]
                ]
            , select
                [ onInput <| syuruiSettei model.tuikaSettei ]
                [ option [ Attr.value "Ëá™ÂãïË©û" ][ text <| "Ëá™ÂãïË©û" ]
                , option [ Attr.value "‰ªñÂãïË©û" ][ text <| "‰ªñÂãïË©û" ]
                , option [ Attr.value "‰∏°Êñπ"   ][ text <| "‰∏°Êñπ" ]
                ]
            , button
                [ onClick <| dousiTuika model.tuikaSettei model.dousi ]
                [ text <| "ËøΩÂä†" ]
            ]
        ]

meisiKousin : String -> Msg
meisiKousin =
  String.split "\n"
    >> MeisiUpdate

keiyousiKousin : String -> Msg
keiyousiKousin =
  String.split "\n"
    >> KeiyousiUpdate

gokanSettei : TuikaSettei -> String -> Msg
gokanSettei settei gokan =
    TuikaSetteiUpdate { settei | gokan = gokan }

gyouSettei settei gyou =
    TuikaSetteiUpdate { settei | gyou = gyou }

katuyoukeiSettei settei katuyoukei =
    TuikaSetteiUpdate { settei | katuyoukei = katuyoukei }

syuruiSettei settei syurui =
    TuikaSetteiUpdate { settei | syurui = syurui }

dousiTuika settei list =
    let
        dousi_ =
            Maybe.map2
            (\k s -> Dousi settei.gokan k s)
            (katuyouFromString settei.gyou settei.katuyoukei)
            (dousiSyuruiFromString settei.syurui)

        list_ =
            case dousi_ of
                Just d -> d :: list
                Nothing -> list
    in
        DousiUpdate list_

dousiSakujo at list =
    let
        help at_ rest result =
            case ( at_, rest ) of
                ( 0, hd :: tl ) ->
                    help (-1) tl result

                ( n, hd :: tl ) ->
                    help (n - 1) tl (hd :: result)

                _ ->
                    result |> List.reverse
    in
        DousiUpdate <| help at list []



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none



-- TWEET PATTERN DIFINITIONS


sentence model =
    choice
    [ intermittentReference model
    , dagaomaeha model
    , declarative model
    , declarative model -- weight
    , kimidakeno model
    , haityuu model
    , otherSentence model
    ]

intermittentReference model =
    choice
    [ seq [ meisiKu model, c "Ôºå", dousiKu model |> map dousiKuRenyou1, c "„Åå„Å°Ôºé" ]
    , seq [ meisiKu model, c "Ôºå", meisiKu model, c "„Åø„Åå„ÅÇ„ÇãÔºé" ]
    , seq [ meisiKu model, c "Ôºå", meisi model, c "„Åò„ÇÉ„ÇìÔºé" ]
    ]

dagaomaeha model =
    let
        ore =
            choice
            [ c "‰ø∫"
            , c "„ÉØ„Ç§"
            , c "ÁßÅ"
            ]

        body =
            choice
            [ meisiKu model |> map (\m -> m++"„Å†")
            , keiyousiGokan model |> map keiyousiSyuusi
            , dousiKu model |> map dousiKuSyuusi
            ]

        omae =
            choice
            [ c "„ÅäÂâç"
            , c "„Åç„Åø"
            , c "„ÅÇ„Å™„Åü"
            ]
    in
        seq [ ore, c "„ÅØ", body, c "„Åå", omae, c "„ÅØÔºü" ]

otherSentence model =
    choice
    [ seq [ meisiKu model, c "„ÅßÁî≥„ÅóË®≥„Å™„ÅÑ„Çàüò¢" ]
    , seq [ meisiKu model, c "„ÅÆNASA" ]
    , seq [ keiyousi model |> map keiyousiSyuusi, c "„ÅÑ„ÅÑ„ÅÑ„ÅÑ„ÅÑ„ÅÑ„ÅÑ„ÅÑ‚úå('œâ'‚úå )‰∏â‚úå('œâ')‚úå‰∏â( ‚úå'œâ')‚úå" ]
    , seq [ c "ÁÑ°Èôê„Å´", tadousi model |> map dousiMizen, c "„Çå„Çã„ÅäÂâç„ÅÆ‰∫∫Áîü" ]
    , seq [ c "(", meisiKu model, c "„ÅØ", tadousi model |> map dousiMizen, c ")„Å™„ÅÑ„Åß„Åô" ]
    , seq [ jidousi model |> map dousiMeirei, c "ÔºÅ„Åù„Å™„Åü„ÅØ", keiyousi model |> map keiyousiSyuusi ]
    ]

declarative model =
    let
        body =
            choice
            [ seq [ meisiKu model, c "„ÅØ", meisiKu model, choice [ c "", c "„Å†", c "„Åß„ÅÇ„Çã", c "„Åß„Å™„ÅÑ", c "„Åß„Åß„Åç„Å¶„ÅÑ„Çã" ] ]
            , seq [ meisiKu model, c "„Å´„ÅØ", meisiKu model, c "„Åå„ÅÇ„Çã" ]
            , seq [ meisiKu model, c "„ÅØ", keiyousiGokan model |> map keiyousiSyuusi ]
            , seq [ meisiKu model, c "„ÅØ", dousiKu model |> map dousiKuSyuusi, choice [ c "", c "„Åì„Å®„Åå„ÅÇ„Çã"] ]
            , seq [ meisiKu model, c "„ÅØ", dousiKu model |> map dousiKuMizen, c "„Å™„ÅÑ", choice [ c "", c "„Åì„Å®„Åå„ÅÇ„Çã"] ]
            , seq [ meisiKu model, c "„Çí", tadousi model |> map dousiRenyou2, c "„Å¶„ÅØ„ÅÑ„Åë„Å™„ÅÑ" ]
            ]
    in
        choice
        [ seq [ body, c "Ôºé #ÂÆ£Ë®ÄÁöÑÁü•Ë≠ò" ]
        , seq [ body, c "Ôºà„Éõ„É≥„Éû„ÅãÔºü"]
        , seq [ body, c "ÔºéÁü•„Çâ„Çì„Åë„Å©Ôºé"]
        , seq [ body, c "„Å£„Å¶È≠îÂâ§Ôºü" ]
        , seq [ c "„ÇÇ„Åó„Åã„Åó„Å¶Ôºö", body ]
        ]

kimidakeno model =
    seq
    [ c "Âêõ„Å†„Åë„ÅÆ"
    , meisi model
    , c "„Çí"
    , tadousi model |> map dousiRenyou2
    , c "„Å¶ÊúÄÂº∑„ÅÆ"
    , meisi model
    , c "„Çí‰Ωú„ÇäÂá∫„ÅõÔºÅ"
    ]

haityuu model =
    Random.map2
    (\s1 ( s2, d ) ->
        s1 ++ "„ÅØ" ++ s2 ++ dousiSyuusi d ++ "Â†¥Âêà„Å®" ++ dousiMizen d ++ "„Å™„ÅÑÂ†¥Âêà„Åå„ÅÇ„Çã„Åû„ÅÑÔºé"
    )
    (meisiKu model)
    (dousiKu model)


choice : List (Generator a) -> Generator a
choice list =
    case list of
        [] -> Random.constant <| Debug.todo "Error"
        hd :: tl -> Random.uniform hd tl |> Random.andThen (\r -> r)  

seq : List (Generator String) -> Generator String
seq list =
    case list of
    [] -> Random.constant ""
    hd :: tl -> Random.map2 (\hdStr tlStr -> hdStr ++ tlStr) hd (seq tl)

c = Random.constant



--- SYNTAX


type alias Meisi = String

meisi : Model -> Generator String
meisi model =
    let
        sahenMeisi =
            model.dousi
                |> List.filter (\(Dousi _ katuyoukei _) -> katuyoukei == Sahen )
                |> List.map (\(Dousi gokan _ _) -> gokan)
    in
        model.meisi ++ sahenMeisi
            |> generatorFromList

meisiKu : Model -> Generator String
meisiKu model =
    choice
    [ meisi model
    , meisi model -- weight
    , meisi model -- weight
    , map2 -- „Äå„ÅÆ„Äç
        (\m1 m2 -> m1 ++ "„ÅÆ" ++ m2)
        (lazy (\_ -> meisiKu model))
        (meisi model)
    , map2 -- ÂΩ¢ÂÆπË©û„ÅÆÈÄ£‰ΩìÂΩ¢
        (\k m -> keiyousiRentai k ++ m)
        (keiyousi model)
        (meisi model)
    , map2 -- Áî®Ë®Ä„ÅÆÈÄ£‰ΩìÂΩ¢
        (\dk m -> dousiKuRentai dk ++ m)
        (lazy (\_ -> dousiKu model))
        (meisi model)
    ]


type alias Keiyousi = String

keiyousi : Model -> Generator KeiyousiGokan
keiyousi model =
    generatorFromList model.keiyousi
        |> map KeiyousiGokan

type KeiyousiGokan = KeiyousiGokan String

keiyousiGokan : Model -> Generator KeiyousiGokan
keiyousiGokan model =
    let
        ppoi =
            generatorFromList
            [ "„Å£„ÅΩ"
            , "„Çâ„Åó"
            ]

        nikui =
            generatorFromList
            [ "Èõ£"
            , "Ëæõ"
            , "„ÇÑ„Åô"
            ]
    in
        choice
        [ keiyousi model
        , keiyousi model -- weight
        , keiyousi model -- weight
        , keiyousi model -- weight
        , map3 -- ÂêçË©û Âä©ÂãïË©û
            (\m j (KeiyousiGokan k) -> m ++ j ++ "„Åè" ++ k |> KeiyousiGokan)
            (meisiKu model)
            ppoi
            (keiyousi model)
        , map3 -- ÂãïË©û„ÅÆÈÄ£Áî®ÂΩ¢Ôºã‰ªòÂ±ûË™û
            (\dk n (KeiyousiGokan k) -> dousiKuRenyou1 dk ++ n ++ "„Åè" ++ k |> KeiyousiGokan)
            (dousiKu model)
            nikui
            (keiyousi model)
        ]

keiyousiKatuyou : Katuyoukei -> KeiyousiGokan -> String
keiyousiKatuyou katuyoukei (KeiyousiGokan gokan) =
    let
        gobi =
            case katuyoukei of
                Mizen   -> "„Åã„Çç"
                Renyou1 -> "„Åã„Å£"
                Renyou2 -> "„Åè"
                Syuusi  -> "„ÅÑ"
                Rentai  -> "„ÅÑ"
                Katei   -> "„Åë„Çå"
                Meirei  -> "Error"
    in
        gokan ++ gobi

keiyousiMizenn  = keiyousiKatuyou Mizen
keiyousiRenyou1 = keiyousiKatuyou Renyou1
keiyousiRenyou2 = keiyousiKatuyou Renyou2
keiyousiSyuusi  = keiyousiKatuyou Syuusi
keiyousiRentai  = keiyousiKatuyou Rentai
keiyousiKatei   = keiyousiKatuyou Katei


type Dousi =
    Dousi String Katuyou DousiSyurui

type Katuyou
    = Godan String
    | Kami String
    | Shimo String
    | Sahen

katuyouToString katuyou =
    case katuyou of
        Godan gyou -> gyou ++ "‰∫îÊÆµ"
        Kami  gyou -> gyou ++ "‰∏ä‰∏Ä"
        Shimo gyou -> gyou ++ "‰∏ã‰∏Ä"
        Sahen      -> "„ÅïÂ§âÊ†º"

katuyouFromString gyou katuyou =
    case katuyou of
        "‰∫îÊÆµ"   -> Godan gyou |> Just
        "‰∏ä‰∏Ä"   -> Kami  gyou |> Just
        "‰∏ã‰∏Ä"   -> Shimo gyou |> Just
        "„ÅïÂ§âÊ†º" -> Sahen      |> Just
        _ -> Nothing

type DousiSyurui
    = Jidousi
    | Tadousi
    | Ryouhou

dousiSyuruiToString syurui =
    case syurui of
        Jidousi -> "Ëá™ÂãïË©û"
        Tadousi -> "‰ªñÂãïË©û"
        Ryouhou -> "‰∏°Êñπ"

dousiSyuruiFromString syurui =
    case syurui of
        "Ëá™ÂãïË©û" -> Jidousi |> Just
        "‰ªñÂãïË©û" -> Tadousi |> Just
        "‰∏°Êñπ"   -> Ryouhou |> Just
        _ -> Nothing

jidousi : Model -> Generator Dousi
jidousi model =
    model.dousi
        |> List.filter (\(Dousi _ _ syurui) ->
            syurui == Jidousi || syurui == Ryouhou)
        |> generatorFromList

tadousi : Model -> Generator Dousi
tadousi model =
    model.dousi
        |> List.filter (\(Dousi _ _ syurui) ->
            syurui == Tadousi || syurui == Ryouhou)
        |> generatorFromList

type alias DousiKu = ( String, Dousi )

dousiKu : Model -> Generator DousiKu
dousiKu model =
    let
        hukusi =
            generatorFromList
            [ "„Å®„Å¶„ÇÇ"
            , "ÈùûÂ∏∏„Å´"
            , "„Åø„Çã„Åã„Çâ„Å´"
            , "Â§öÂ∞ë„ÅØ"
            ]

        youni =
            generatorFromList
            [ "„Çà„ÅÜ„Å´" ]

        jidou =
             jidousi model |> map (\d -> ("", d))

        tadou =
            map2
            (\m d -> (m++"„Çí", d))
            (lazy (\_ -> meisiKu model))
            (tadousi model)
    in
        choice
        [ jidou
        , jidou -- weight
        , jidou -- weight
        , tadou
        , tadou -- weight
        , tadou -- weight
        , map3 -- ÂãïË©û„ÅÆÈÄ£‰ΩìÂΩ¢Ôºã„Äå„Çà„ÅÜ„Å´„Äç
            (\dk y d2 -> ( dousiKuRentai dk ++ y, d2 ))
            (lazy (\_ -> dousiKu model))
            youni
            (jidousi model)
        , map2 -- ÂΩ¢ÂÆπË©û„ÅÆÈÄ£Áî®ÂΩ¢
            (\k ( s, d ) -> ( keiyousiRenyou2 k ++ s, d ))
            (lazy (\_ -> keiyousiGokan model))
            (lazy (\_ -> dousiKu model))
        , map2 -- ÂâØË©û
            (\h ( s, d ) -> ( h++s, d ))
            hukusi
            (lazy (\_ -> dousiKu model))
        ]

type Katuyoukei
    = Mizen
    | Renyou1
    | Renyou2
    | Syuusi
    | Rentai
    | Katei
    | Meirei

dousiKatuyou : Katuyoukei -> Dousi -> String
dousiKatuyou katuyoukei dousi =
    let
        (Dousi gokan katuyou _) =
            dousi
        (Katuyougobi mizen ( renyou1, renyou2 ) syuusi rentai katei meirei) =
            katuyougobi katuyou

        gobi =
            case katuyoukei of
                Mizen -> mizen
                Renyou1 -> renyou1
                Renyou2 -> renyou2
                Syuusi -> syuusi
                Rentai -> rentai
                Katei -> katei
                Meirei -> meirei
    in
        gokan ++ gobi

dousiMizen   = dousiKatuyou Mizen
dousiRenyou1 = dousiKatuyou Renyou1
dousiRenyou2 = dousiKatuyou Renyou2
dousiSyuusi  = dousiKatuyou Syuusi
dousiRentai  = dousiKatuyou Rentai
dousiKatei   = dousiKatuyou Katei
dousiMeirei  = dousiKatuyou Meirei

dousiKuKatuyou : Katuyoukei -> ( String, Dousi ) -> String
dousiKuKatuyou katuyoukei ( syuusyoku, dousi ) =
    syuusyoku ++ dousiKatuyou katuyoukei dousi

dousiKuMizen   = dousiKuKatuyou Mizen
dousiKuRenyou1 = dousiKuKatuyou Renyou1
dousiKuRenyou2 = dousiKuKatuyou Renyou2
dousiKuSyuusi  = dousiKuKatuyou Syuusi
dousiKuRentai  = dousiKuKatuyou Rentai
dousiKuKatei   = dousiKuKatuyou Katei
dousiKuMeirei  = dousiKuKatuyou Meirei

type Katuyougobi =
    Katuyougobi String ( String, String ) String String String  String

katuyougobi : Katuyou -> Katuyougobi
katuyougobi katuyou =
    case katuyou of
        Godan "„Åã" -> Katuyougobi "„Åã" ( "„Åç", "„ÅÑ" ) "„Åè" "„Åè" "„Åë" "„Åë"
        Godan "„Åå" -> Katuyougobi "„Åå" ( "„Åé", "„ÅÑ" ) "„Åê" "„Åê" "„Åí" "„Åí"
        Godan "„Åï" -> Katuyougobi "„Åï" ( "„Åó", "„Åó" ) "„Åô" "„Åô" "„Åõ" "„Åõ"
        Godan "„Åü" -> Katuyougobi "„Åü" ( "„Å°", "„Å£" ) "„Å§" "„Å§" "„Å¶" "„Å¶"
        Godan "„Å™" -> Katuyougobi "„Å™" ( "„Å´", "„Çì" ) "„Å¨" "„Å¨" "„Å≠" "„Å≠"
        Godan "„Å∞" -> Katuyougobi "„Å∞" ( "„Å≥", "„Çì" ) "„Å∂" "„Å∂" "„Åπ" "„Åπ"
        Godan "„Åæ" -> Katuyougobi "„Åæ" ( "„Åø", "„Çì" ) "„ÇÄ" "„ÇÄ" "„ÇÅ" "„ÇÅ"
        Godan "„Çâ" -> Katuyougobi "„Çâ" ( "„Çä", "„Å£" ) "„Çã" "„Çã" "„Çå" "„Çå"
        Godan "„Çè" -> Katuyougobi "„Çè" ( "„ÅÑ", "„Å£" ) "„ÅÜ" "„ÅÜ" "„Åà" "„Åà"
        Kami  "„Åç" -> Katuyougobi "„Åç" ( "„Åç", "„Åç" ) "„Åç„Çã" "„Åç„Çã" "„Åç„Çå" "„Åç„Çç"
        Kami  "„Åü" -> Katuyougobi "„Å°" ( "„Å°", "„Å°" ) "„Å°„Çã" "„Å°„Çã" "„Å°„Çå" "„Å°„Çç"
        Shimo ""   -> Katuyougobi "" ( "", "" ) "„Çã" "„Çã" "„Çå" "„Çç"
        Shimo "„ÅÇ" -> Katuyougobi "„Åà" ( "„Åà", "„Åà" ) "„Åà„Çã" "„Åà„Çã" "„Åà„Çå" "„Åà„Çç"
        Shimo "„Åå" -> Katuyougobi "„Åí" ( "„Åí", "„Åí" ) "„Åí„Çã" "„Åí„Çã" "„Åí„Çå" "„Åí„Çç"
        Shimo "„Åï" -> Katuyougobi "„Åõ" ( "„Åõ", "„Åõ" ) "„Åõ„Çã" "„Åõ„Çã" "„Åõ„Çå" "„Åõ„Çç"
        Shimo "„Å∞" -> Katuyougobi "„Åπ" ( "„Åπ", "„Åπ" ) "„Åπ„Çã" "„Åπ„Çã" "„Åπ„Çå" "„Åπ„Çç"
        Shimo "„Åæ" -> Katuyougobi "„ÇÅ" ( "„ÇÅ", "„ÇÅ" ) "„ÇÅ„Çã" "„ÇÅ„Çã" "„ÇÅ„Çå" "„ÇÅ„Çç"
        Sahen      -> Katuyougobi "„Åó" ( "„Åó", "„Åó" ) "„Åô„Çã" "„Åô„Çã" "„Åô„Çå" "„Åõ„Çà"
        _          -> Katuyougobi "Error" ( "Error", "Error" ) "Error" "Error" "Error" "Error"

generatorFromList : List a -> Generator a
generatorFromList list =
    case list of
        [] -> Random.constant <| Debug.todo "Error"
        hd :: tl -> Random.uniform hd tl


-- INIT


init : ( Model, Cmd Msg )
init =
    (
        { sentences = []
        , meisi =
            [ "‰∫∫"
            , "Á•û"
            , "‰ªñ‰∫∫"
            , "‰∫∫È°û"
            , "ÂèØËÉΩÊÄß"
            , "„Ç¢„Ç§„Éâ„É´"
            , "ÂèØÁáÉÊÄß"
            , "Áæ§È¶¨"
            , "Âπ¥Âèé"
            , "ÁôæÂêà"
            , "„É°„É¢„É™Á©∫Èñì"
            , "ÊµÅÂãïÊÄß"
            , "Ôº£Ôº∞Ôºµ"
            , "ÂåñÁ≤ßÂìÅ"
            , "ÁîüÊ¥ª„É™„Ç∫„É†"
            , "„Éê„Éä„Éä"
            , "Èö†„Çå„Éû„É´„Ç≥„Éï„É¢„Éá„É´"
            , "Áå´"
            , "Á≠ëÊ≥¢Â§ßÂ≠¶"
            , "Ê†∏ÂÆüÈ®ì"
            , "Ôº°Ôº©"
            , "Ëñ¨"
            , "Á§æ‰ºö"
            , "„Ç¥„É™„É©"
            , "Âçò‰Ωç"
            , "‰∫∫Áîü"
            , "„Ç™„Çø„ÇØ"
            ]
        , keiyousi =
            [ "Áæé„Åó"
            , "ÂÑ™„Åó"
            , "Ë≥¢"
            , "Ëôö„Åó"
            , "ÊÄñ"
            , "Áóõ"
            , "ÊÇ≤„Åó"
            , "ÁæéÂë≥„Åó"
            , "ÈÜú"
            , "ÊÇî„Åó"
            , "ÂèØÊÑõ"
            , "Â§ß„Åç"
            , "Èï∑"
            , "Ëã•"
            , "Ê∑±"
            , "ÈÅ†"
            , "Êöó"
            , "ËñÑ"
            , "„Åü„Åè„Åæ„Åó"
            , "Ê•Ω„Åó"
            , "ÊøÄ„Åó"
            ]
        , dousi =
            ([ Dousi "ÁáÉ" <| Shimo "„ÅÇ"
            , Dousi "Áîü" <| Kami  "„Åç"
            , Dousi "Ë©±" <| Godan "„Åï"
            , Dousi "ÂØù" <| Shimo ""
            , Dousi "ÂÖâ" <| Godan "„Çâ"
            , Dousi "Ëºù" <| Godan "„Åã"
            , Dousi "Êõ≤„Åå" <| Godan "„Çâ"
            , Dousi "Ê≠©" <| Godan "„Åã"
            , Dousi "ËêΩ" <| Kami "„Åü"
            ] |> List.map (\f -> f Jidousi))
            ++
            ([ Dousi "È£ü" <| Shimo "„Å∞"
            , Dousi "È£≤" <| Godan "„Åæ"
            , Dousi "Ë≤∑" <| Godan "„Çè"
            , Dousi "Ë¶ã" <| Shimo ""
            , Dousi "Ë¶ã" <| Shimo "„Åï"
            , Dousi "Êõ∏" <| Godan "„Åã"
            , Dousi "ÈÄÅ" <| Godan "„Çâ"
            , Dousi "‰Ωø" <| Godan "„Çè"
            , Dousi "Ë©±" <| Godan "„Åï"
            , Dousi "Á©ø" <| Godan "„Åü"
            , Dousi "Êõ≤" <| Shimo "„Åå"
            , Dousi "Êîª" <| Shimo "„Åæ"
            , Dousi "ËêΩ„Å®" <| Godan "„Åï"
            , Dousi "Âè©" <| Godan "„Åã"
            ] |> List.map (\f -> f Tadousi))
            ++
            ([ "Á≠ã„Éà„É¨"
            , "Â¥©Â£ä"
            ] |> List.map (\gokan -> Dousi gokan Sahen Jidousi))
            ++
            ([ "ÂæÖÊúõ"
            , "Âº∑Ë¶Å"
            , "Â†±Âëä"
            , "ÂÆüË£Ö"
            , "ÈÄ£ÊÉ≥"
            ] |> List.map (\gokan -> Dousi gokan Sahen Tadousi))
            ++
            (["ÈÖç‰ø°"
            , "ÈñãÁô∫"
            , "„Ç®„É≥„Ç∏„Éß„Ç§"
            ] |> List.map (\gokan -> Dousi gokan Sahen Ryouhou))
        , tuikaSettei =
            { gokan = ""
            , gyou = "„ÅÇ"
            , katuyoukei = "‰∫îÊÆµ"
            , syurui = "Ëá™ÂãïË©û"
            }
        }
    , Cmd.none
    )
